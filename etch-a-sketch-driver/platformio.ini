; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
platform = espressif32@6.6.0
board = motorgo_mini_v2_r1
framework = arduino
build_flags =
    -D WIFI_SSID=\"${sysenv.WIFI_SSID_ENV_VAR}\"
    -D WIFI_PASSWORD=\"${sysenv.WIFI_PASSWORD_ENV_VAR}\"
    -DARDUINO_USB_CDC_ON_BOOT=1
    -DARDUINO_USB_MODE=1

lib_deps =
    https://github.com/Every-Flavor-Robotics/motorgo-mini-driver.git#dev
    https://github.com/Links2004/arduinoWebSockets.git
    thomasfredericks/Chrono@^1.2.0
monitor_speed=5000000
extra_scripts=get_config.py

[env:test_encoders]
build_src_filter = +<test_encoders.cpp> +<planner.cpp>
lib_deps =
    https://github.com/Every-Flavor-Robotics/motorgo-mini-driver.git#dev


[env:main]
build_src_filter = +<main.cpp> +<planner.cpp> +<main_draw.cpp> +<main_erase.cpp> +<gcode.cpp> +<gcode_stream.cpp> +<wifi_gcode_stream.cpp>
build_flags =
    ${env.build_flags}

[env:find_zero]
build_src_filter = +<find_zero.cpp>
build_flags =
    ${env.build_flags}
lib_deps =
    https://github.com/Every-Flavor-Robotics/motorgo-mini-driver.git#dev

[env:home]
build_src_filter = +<home.cpp>
build_flags =
    ${env.build_flags}
lib_deps =
    https://github.com/Every-Flavor-Robotics/motorgo-mini-driver.git#dev

[env:stepper]
platform = espressif32@6.6.0
board = adafruit_feather_esp32s3_nopsram
framework = arduino
build_flags =
build_src_filter = +<main_stepper.cpp> +<planner.cpp> +<main_stepper_draw.h> +<main_stepper_erase.cpp>
lib_deps =
    Wifi
    https://github.com/arduino-libraries/Arduino_JSON.git#0.2.0
    https://github.com/Links2004/arduinoWebSockets.git
    thomasfredericks/Chrono@^1.2.0
    https://github.com/laurb9/StepperDriver.git

[env:ff_gain]
build_src_filter = +<compute_ff_gain.cpp> +<planner.cpp>

[env:tune_controllers]
build_src_filter = +<tune_controllers.cpp> +<planner.cpp>


[env:sys_id]
build_src_filter = +<main_sys_id.cpp> +<planner.cpp>
lib_deps =
    ${env.lib_deps}
    https://github.com/Every-Flavor-Robotics/serial-data-stream.git#concurrent-data-transfer

[env:erase_test]
build_src_filter = +<erase_test.cpp>


